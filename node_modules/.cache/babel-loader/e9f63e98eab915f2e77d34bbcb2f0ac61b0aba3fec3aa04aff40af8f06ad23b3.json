{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst SECRET_KEY = \"3543564331safsgdtuy\"; // Use a secure env value\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// MongoDB Connection\nmongoose.connect(\"mongodb://127.0.0.1:27017/authDB\", {});\nconst db = mongoose.connection;\ndb.once(\"open\", () => console.log(\"✅ Connected to MongoDB\"));\ndb.on(\"error\", err => console.error(\"❌ MongoDB connection error:\", err));\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: String,\n  password: String\n});\nconst User = mongoose.model(\"User\", userSchema);\n\n// Appointment Schema\nconst appointmentSchema = new mongoose.Schema({\n  userId: mongoose.Schema.Types.ObjectId,\n  name: String,\n  spouseName: String,\n  childName: String,\n  mobile: String,\n  email: String,\n  date: String,\n  time: String,\n  mainService: String,\n  subService: String\n});\nconst Appointment = mongoose.model(\"Appointment\", appointmentSchema);\n\n// 🔐 Middleware to verify JWT\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader === null || authHeader === void 0 ? void 0 : authHeader.split(\" \")[1];\n  if (!token) return res.status(401).json({\n    message: \"Access denied. Token missing.\"\n  });\n  try {\n    const verified = jwt.verify(token, SECRET_KEY);\n    req.user = verified;\n    next();\n  } catch (err) {\n    res.status(403).json({\n      message: \"Invalid or expired token.\"\n    });\n  }\n};\n\n// 📝 Signup Route\napp.post(\"/signup\", async (req, res) => {\n  const {\n    username,\n    email,\n    password\n  } = req.body;\n  if (!username || !email || !password) {\n    return res.status(400).json({\n      message: \"All fields are required.\"\n    });\n  }\n  const existingUser = await User.findOne({\n    email\n  });\n  if (existingUser) {\n    return res.status(400).json({\n      message: \"Email already in use.\"\n    });\n  }\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const newUser = new User({\n    username,\n    email,\n    password: hashedPassword\n  });\n  await newUser.save();\n  res.status(201).json({\n    message: \"Signup successful!\"\n  });\n});\n\n// 🔑 Login Route\napp.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  const user = await User.findOne({\n    email\n  });\n  if (!user) {\n    return res.status(400).json({\n      message: \"User not found.\"\n    });\n  }\n  const isMatch = await bcrypt.compare(password, user.password);\n  if (!isMatch) {\n    return res.status(400).json({\n      message: \"Invalid credentials.\"\n    });\n  }\n  const token = jwt.sign({\n    id: user._id\n  }, SECRET_KEY, {\n    expiresIn: \"1h\"\n  });\n  res.json({\n    message: \"Login successful!\",\n    token,\n    username: user.username\n  });\n});\n\n// 📅 Book Appointment Route (Protected)\napp.post(\"/api/appointments\", authenticateToken, async (req, res) => {\n  const {\n    name,\n    spouseName,\n    childName,\n    mobile,\n    email,\n    date,\n    time,\n    mainService,\n    subService\n  } = req.body;\n  try {\n    const newAppointment = new Appointment({\n      userId: req.user.id,\n      name,\n      spouseName,\n      childName,\n      mobile,\n      email,\n      date,\n      time,\n      mainService,\n      subService\n    });\n    await newAppointment.save();\n    res.status(201).json({\n      message: \"Appointment booked successfully!\"\n    });\n  } catch (error) {\n    console.error(\"Error booking appointment:\", error);\n    res.status(500).json({\n      message: \"Server error while booking appointment.\"\n    });\n  }\n});\n\n// 📂 Get All Appointments (Protected)\napp.get(\"/api/appointments\", authenticateToken, async (req, res) => {\n  try {\n    const allAppointments = await Appointment.find({\n      userId: req.user.id\n    });\n    res.json(allAppointments);\n  } catch (error) {\n    console.error(\"Error fetching all appointments:\", error);\n    res.status(500).json({\n      message: \"Server error while fetching appointments.\"\n    });\n  }\n});\n\n// 📂 Get Past Appointments (Optional: Keep if needed)\napp.get(\"/api/appointments/past\", authenticateToken, async (req, res) => {\n  try {\n    const today = new Date().toISOString().split(\"T\")[0];\n    const pastAppointments = await Appointment.find({\n      userId: req.user.id,\n      date: {\n        $lt: today\n      }\n    });\n    res.json(pastAppointments);\n  } catch (error) {\n    console.error(\"Error fetching past appointments:\", error);\n    res.status(500).json({\n      message: \"Server error while fetching past appointments.\"\n    });\n  }\n});\n\n// 🚀 Start Server\napp.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));","map":{"version":3,"names":["express","require","mongoose","cors","bcrypt","jwt","config","app","PORT","process","env","SECRET_KEY","use","json","connect","db","connection","once","console","log","on","err","error","userSchema","Schema","username","String","email","password","User","model","appointmentSchema","userId","Types","ObjectId","name","spouseName","childName","mobile","date","time","mainService","subService","Appointment","authenticateToken","req","res","next","authHeader","headers","token","split","status","message","verified","verify","user","post","body","existingUser","findOne","hashedPassword","hash","newUser","save","isMatch","compare","sign","id","_id","expiresIn","newAppointment","get","allAppointments","find","today","Date","toISOString","pastAppointments","$lt","listen"],"sources":["C:/Users/shiva/Downloads/project/src/components/services.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\nconst SECRET_KEY = \"3543564331safsgdtuy\"; // Use a secure env value\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// MongoDB Connection\r\nmongoose.connect(\"mongodb://127.0.0.1:27017/authDB\", {});\r\n\r\nconst db = mongoose.connection;\r\ndb.once(\"open\", () => console.log(\"✅ Connected to MongoDB\"));\r\ndb.on(\"error\", (err) => console.error(\"❌ MongoDB connection error:\", err));\r\n\r\n// User Schema\r\nconst userSchema = new mongoose.Schema({\r\n  username: String,\r\n  email: String,\r\n  password: String,\r\n});\r\n\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\n// Appointment Schema\r\nconst appointmentSchema = new mongoose.Schema({\r\n  userId: mongoose.Schema.Types.ObjectId,\r\n  name: String,\r\n  spouseName: String,\r\n  childName: String,\r\n  mobile: String,\r\n  email: String,\r\n  date: String,\r\n  time: String,\r\n  mainService: String,\r\n  subService: String,\r\n});\r\n\r\nconst Appointment = mongoose.model(\"Appointment\", appointmentSchema);\r\n\r\n// 🔐 Middleware to verify JWT\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers[\"authorization\"];\r\n  const token = authHeader?.split(\" \")[1];\r\n\r\n  if (!token) return res.status(401).json({ message: \"Access denied. Token missing.\" });\r\n\r\n  try {\r\n    const verified = jwt.verify(token, SECRET_KEY);\r\n    req.user = verified;\r\n    next();\r\n  } catch (err) {\r\n    res.status(403).json({ message: \"Invalid or expired token.\" });\r\n  }\r\n};\r\n\r\n// 📝 Signup Route\r\napp.post(\"/signup\", async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n\r\n  if (!username || !email || !password) {\r\n    return res.status(400).json({ message: \"All fields are required.\" });\r\n  }\r\n\r\n  const existingUser = await User.findOne({ email });\r\n  if (existingUser) {\r\n    return res.status(400).json({ message: \"Email already in use.\" });\r\n  }\r\n\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n  const newUser = new User({\r\n    username,\r\n    email,\r\n    password: hashedPassword,\r\n  });\r\n\r\n  await newUser.save();\r\n  res.status(201).json({ message: \"Signup successful!\" });\r\n});\r\n\r\n// 🔑 Login Route\r\napp.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const user = await User.findOne({ email });\r\n  if (!user) {\r\n    return res.status(400).json({ message: \"User not found.\" });\r\n  }\r\n\r\n  const isMatch = await bcrypt.compare(password, user.password);\r\n  if (!isMatch) {\r\n    return res.status(400).json({ message: \"Invalid credentials.\" });\r\n  }\r\n\r\n  const token = jwt.sign({ id: user._id }, SECRET_KEY, { expiresIn: \"1h\" });\r\n\r\n  res.json({\r\n    message: \"Login successful!\",\r\n    token,\r\n    username: user.username,\r\n  });\r\n});\r\n\r\n// 📅 Book Appointment Route (Protected)\r\napp.post(\"/api/appointments\", authenticateToken, async (req, res) => {\r\n  const {\r\n    name,\r\n    spouseName,\r\n    childName,\r\n    mobile,\r\n    email,\r\n    date,\r\n    time,\r\n    mainService,\r\n    subService,\r\n  } = req.body;\r\n\r\n  try {\r\n    const newAppointment = new Appointment({\r\n      userId: req.user.id,\r\n      name,\r\n      spouseName,\r\n      childName,\r\n      mobile,\r\n      email,\r\n      date,\r\n      time,\r\n      mainService,\r\n      subService,\r\n    });\r\n\r\n    await newAppointment.save();\r\n    res.status(201).json({ message: \"Appointment booked successfully!\" });\r\n  } catch (error) {\r\n    console.error(\"Error booking appointment:\", error);\r\n    res.status(500).json({ message: \"Server error while booking appointment.\" });\r\n  }\r\n});\r\n\r\n// 📂 Get All Appointments (Protected)\r\napp.get(\"/api/appointments\", authenticateToken, async (req, res) => {\r\n  try {\r\n    const allAppointments = await Appointment.find({\r\n      userId: req.user.id,\r\n    });\r\n\r\n    res.json(allAppointments);\r\n  } catch (error) {\r\n    console.error(\"Error fetching all appointments:\", error);\r\n    res.status(500).json({ message: \"Server error while fetching appointments.\" });\r\n  }\r\n});\r\n\r\n// 📂 Get Past Appointments (Optional: Keep if needed)\r\napp.get(\"/api/appointments/past\", authenticateToken, async (req, res) => {\r\n  try {\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n\r\n    const pastAppointments = await Appointment.find({\r\n      userId: req.user.id,\r\n      date: { $lt: today },\r\n    });\r\n\r\n    res.json(pastAppointments);\r\n  } catch (error) {\r\n    console.error(\"Error fetching past appointments:\", error);\r\n    res.status(500).json({ message: \"Server error while fetching past appointments.\" });\r\n  }\r\n});\r\n\r\n// 🚀 Start Server\r\napp.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}